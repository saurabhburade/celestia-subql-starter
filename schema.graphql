# To improve query performance, we strongly suggest adding indexes to any field that you plan to filter or sort by
# Add the `@index` or `@index(unique: true)` annotation after any non-key field
# https://academy.subquery.network/build/graphql.html#indexing-by-non-primary-key-field

# type Block @entity {
#   id: ID! # The block hash
#   height: BigInt!
# }

# type Transaction @entity {
#   id: ID!
#   blockHeight: BigInt!
#   timestamp: String!
# }

type Transfers @entity {
  id: ID!
  blockHeight: BigInt
  txHash: String
  fromAddress: String
  toAddress: String
  amount: String
  denomination: String
}

type BlockData @entity {
  id: ID!
  hash: String! @index
  height: Float! @index
  proposer: String!
  totalBlobSize: Float!
  totalSquareSize: Float!

  totalEventsCount: Float!

  totalBlobTransactionCount: Float!

  totalTransactionCount: Float!

  avgNativePrice: Float!
  currentNativePrice: Float!
  totalBlockFeeNatve: Float!
  totalBlockFeeUSD: Float!

  timestamp: Float
}
type BlobData @entity {
  id: ID!
  namespaceId: String
  data: String
  shareVersion: String
  namespaceVersion: String
  transaction: TransactionData
  commitment: String
  size: Float
  signer: String
}

type TransactionData @entity {
  id: ID!
  hash: String! @index
  blockHeight: Float! @index
  timestamp: Float!

  signer: String!

  amount: Float!
  denomination: String!

  txFeeNative: Float!
  nMessages: Float!
  nEvents: Float!
  nDataSubs: Float!
  totalBytes: Float!

  isBlobTransaction: Boolean!
  blobs: [BlobData] @derivedFrom(field: "transaction")
}

type Block @entity {
  id: ID!
  height: Float! @index
  hash: String! @index
  timestamp: Date! @index
  proposer: String
  nTransactions: Int
  nEvents: Int
  nBlobs: Int
  blobSize: Int
  totalFeesNative: Float
  totalFeesUSD: Float
  version: String
  nativePrice: Float!
}

type PriceFeedMinute @entity {
  id: ID!
  date: Date
  nativePrice: Float!
  nativeBlock: Int!
  nativeDate: Date
}

type AccountEntity @entity {
  id: ID!
  type: Float
  attachedAppId: String
  app: AppEntity
  validator: Boolean
  validatorSessionParticipated: Float
  createdAt: Date!
  updatedAt: Date!
  timestampCreation: Date! @index
  address: String! @index
  totalByteSize: Float! @index
  totalFees: Float
  totalDAFees: Float
  totalDAFeesUSD: Float
  totalFeesUSD: Float
  totalFeesNative: Float
  totalDataSubmissionCount: Float
  totalTransferCount: Float
  totalExtrinsicCount: Float
  totalBlocksCount: Float
  totalDataBlocksCount: Float
  lastPriceFeed: PriceFeedMinute
  timestampLast: Date! @index
  avgNativePrice: Float
  # accountDayData: [AccountDayData] @derivedFrom(field: "account")
  # accountHourData: [AccountHourData] @derivedFrom(field: "account")
  startBlock: Float
  endBlock: Float
}

type AppEntity @entity {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  creationRawData: String
  creationTxn: TransactionData
  timestampCreation: Date! @index
  owner: String! @index
  totalByteSize: Float! @index
  totalDAFees: Float
  totalDAFeesUSD: Float
  totalFeesUSD: Float
  totalFeesNative: Float
  totalDataSubmissionCount: Float
  totalTransferCount: Float
  totalExtrinsicCount: Float
  totalBlocksCount: Float
  totalDataBlocksCount: Float
  lastPriceFeed: PriceFeedMinute
  timestampLast: Date! @index
  avgNativePrice: Float
  # appDayData: [AppDayData] @derivedFrom(field: "app")
  # appHourData: [AppHourData] @derivedFrom(field: "app")
  startBlock: Float
  endBlock: Float
  name: String!
}
